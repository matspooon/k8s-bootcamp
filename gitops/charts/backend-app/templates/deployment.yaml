apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  labels:
    app: {{ .Chart.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          ports:
            - containerPort: {{ .Values.service.port }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          {{- range .Values.env }}
          - name: {{ .name }}
            value: {{ .value | quote }}
          {{- end }}
          - name: DB_URL
            valueFrom: 
              secretKeyRef:
                name : {{ .Values.db.secretName }}
                key: DB_URL
          envFrom:
          - secretRef:
              name: {{ .Values.db.secretName }}
      imagePullSecrets: 
        {{- range .Values.imagePullSecrets }}
        - name: {{ .name }}
        {{- end }}
      livenessProbe:        # ← 살아있는지 체크 (죽었으면 재시작)
        httpGet:
          path: /healthcheck
          port: 8080
        initialDelaySeconds: 10
        periodSeconds: 15
      readinessProbe:       # ← 트래픽 받을 준비됐는지 체크
        httpGet:
          path: /healthcheck
          port: 8080
        initialDelaySeconds: 5
        periodSeconds: 10
      startupProbe:         # ← 앱 시작 완료 여부 체크 (느리게 뜨는 앱에 유용)
        httpGet:
          path: /healthcheck
          port: 8080
        failureThreshold: 30
        periodSeconds: 10
